server:
  port: 8080

spring:
  kafka:
    bootstrap-servers:
      - 192.168.137.200:9092
      - 192.168.137.200:9093
      - 192.168.137.200:9094
    producer: # 生产者
      retries: 3 # 设置大于0的值，则客户端会将发送失败的记录重新发送
      batch-size: 16384
      buffer-memory: 33554432
      acks: 1
      # 指定消息 key 和 消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: default-group
      enable-auto-commit: false
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 500
    listener:
      # 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
      # RECORD

      # 当每一批 poll() 的数据被消费者监听器（ListenerConsumer）处理之后提交
      # BATCH

      # 当每一批 poll() 的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于 TIME 时提交
      # TIME

      # 当每一批 poll() 的数据被消费者监听器（ListenerConsumer）处理之后，被处理 record 数量大于等于 COUNT 时提交
      # COUNT

      # TIME | COUNT 有一个条件满足时提交
      # COUNT_TIME

      # 当每一批 poll() 的数据被消费者监听器（ListenerConsumer）处理之后，手动调用 Acknowledgment.acknowledge() 后提交
      # MANUAL

      # 手动调用 Acknowledgment.acknowledge() 后立即提交，一般使用这种
      ack-mode: MANUAL_IMMEDIATE
  redis:
    host: 127.0.0.1
